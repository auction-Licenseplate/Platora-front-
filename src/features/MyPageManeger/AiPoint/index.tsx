import { AipointStyled } from "./styled";
import { Input, Button } from "antd";
import axios from "axios";
import { useState } from "react";

interface ScoreType {
  grade: string;
  score: number;
  price: number;
}

const AiPoint = () => {
  const [score, setScore] = useState<ScoreType | null>(null); // score 초기값을 빈 문자열로 설정
  const [point, setPoint] = useState("");

  const prompt = `
번호판 '${point}'의 점수를 평가하라.

 **한국 번호판 형식**:
- 앞자리: 2자리 또는 3자리 숫자 (예: 12, 123)
- 뒷자리: 4자리 숫자 (예: 4567)


중간 한글 한 글자를 제외하고 앞자리 숫자와 뒷자리 숫자로 분리한 후 평가 시작!
 반드시 등급별 예시를 보고 비교후에 등급에 따른 점수를 체크할 것!
 각 숫자를 개별 요소로 분리하여 판단할 것!
##  **번호판 점수 계산 로직**
 **1단계: 1등급인지 확인**  
   -  **앞자리와 뒷자리가 동일한 숫자로만 이루어진 경우 (완전 포커 번호)**  
   -  **예시: "11가1111", "22나2222", "77다7777"**  
   - → **이 조건을 만족하면 즉시 1등급 확정 후 종료**  

 **2단계: 전체 오름차순(2등급) & 전체 내림차순(4등급) 확인** 
 📌 **2등급(오름차순)과 4등급(내림차순)의 차이를 반드시 구별할 것!**
✅ **오름차순 (2등급) 예제**
- "12가3456" → 1 → 2 → 3 → 4 → 5 → 6 (✔ 오름차순)
- "23나5678" → 2 → 3 → 5 → 6 → 7 → 8 (✔ 오름차순)
- "01마2345" → 0 → 1 → 2 → 3 → 4 → 5 (✔ 오름차순)

✅ **내림차순 (4등급) 예제**
- "98가7654" → 9 → 8 → 7 → 6 → 5 → 4 (✔ 내림차순)
- "87나6543" → 8 → 7 → 6 → 5 → 4 → 3 (✔ 내림차순)
- "76다5432" → 7 → 6 → 5 → 4 → 3 → 2 (✔ 내림차순)

❌ **틀린 예제 (오름차순/내림차순 아님)**
- "12가3654" → 1 → 2 → ❌3 → 6❌ → 5 → 4 (오름차순 아님)
- "98가7432" → 9 → 8 → ❌7 → 4❌ → 3 → 2 (내림차순 아님)
 
   -  **번호 전체(앞자리 + 뒷자리)가 오름차순인지 확인**  
     - **오름차순 정의:** 모든 숫자가 점점 증가하는 형태인지 확인 (예: "12가3456")  
     - 예시: "12가3456", "23가5678", "34가6789"  
     - → **2등급 확정 후 종료**  
   -  **번호 전체(앞자리 + 뒷자리)가 내림차순인지 확인**  
     - **내림차순 정의:** 모든 숫자가 점점 감소하는 형태인지 확인 (예: "98가7654")  
     - 예시: "98가7654", "87가6543", "76가5432"  
     - → **4등급 확정 후 종료**  

 **3단계: 앞뒤 다른 포커 번호(3등급) 확인**  
   -  **앞자리 숫자가 포커 번호인지 확인 (예: 11, 222, 333)**  
   -  **뒷자리 숫자가 포커 번호인지 확인 (예: 4444, 5555, 6666)**  
   -  **앞자리 숫자와 뒷자리 숫자가 서로 다를 것**  
   -  **예시: "22가3333", "44나5555", "11다2222", "00가7777", "99나4444"**  
   - → **이 조건을 만족하면 즉시 3등급 확정 후 종료**  

 **4단계: 앞자리 오름차순 + 뒷자리 포커 (5등급) 확인**  
   -  **앞자리 숫자가 오름차순이며, 뒷자리 숫자가 포커 번호일 것**  
   -  **예시: "12가5555", "23나7777"**  
   - → **5등급 확정 후 종료**  

 **5단계: 부분 오름차순(6~8등급) 확인**  
  5단계: 부분 오름차순(6~8등급) 확인


📌 숫자의 연속성, 포커 패턴, 오름차순 패턴을 정확히 확인할 것!
조건이 하나라도 맞으면 등급 확정
✅ 올바른 예제:
"XX가1234" → 1 → 2 → 3 → 4 (✔ 오름차순)
"XX나2345" → 2 → 3 → 4 → 5 (✔ 오름차순)
"XX다3456" → 3 → 4 → 5 → 6 (✔ 오름차순)
"XX라4567" → 4 → 5 → 6 → 7 (✔ 오름차순)  
"XX마5678" → 5 → 6 → 7 → 8 (✔ 오름차순) 

❌ 잘못된 예제:
"XX나1324" → [1] → [3] → ❌[2]❌ → [4] (오름차순 아님)
"XX라7689" → [7] → [6] → ❌[8]❌ → [9] (오름차순 아님)

✅ 앞자리 숫자가 연속된 숫자 (6등급) 예제

"12가XXXX" → 1 → 2 (✔ 연속된 숫자)

"23나XXXX" → 2 → 3 (✔ 연속된 숫자)

"34다XXXX" → 3 → 4 (✔ 연속된 숫자)

"45라XXXX" → 4 → 5 (✔ 연속된 숫자)

"56마XXXX" → 5 → 6 (✔ 연속된 숫자)

✅ 뒷자리 숫자가 포커 번호 (7등급) 예제

"XX가5555" → 5 → 5 → 5 → 5 (✔ 포커 번호)

"XX나6666" → 6 → 6 → 6 → 6 (✔ 포커 번호)

"XX다7777" → 7 → 7 → 7 → 7 (✔ 포커 번호)

"XX라8888" → 8 → 8 → 8 → 8 (✔ 포커 번호)

"XX마9999" → 9 → 9 → 9 → 9 (✔ 포커 번호)

✅ 뒷자리 숫자가 오름차순 (8등급) 예제

"XX가1234" → 1 → 2 → 3 → 4 (✔ 오름차순)

"XX나2345" → 2 → 3 → 4 → 5 (✔ 오름차순)

"XX다3456" → 3 → 4 → 5 → 6 (✔ 오름차순)

"XX라4567" → 4 → 5 → 6 → 7 (✔ 오름차순)

"XX마5678" → 5 → 6 → 7 → 8 (✔ 오름차순)

❌ 틀린 예제 (부분 오름차순이 아님 - 혼합된 순서)

"34가X6XX" → **3 → 4 → ❌6❌ (불연속)

"XX나6565" → 6 → 5 → 6 → 5 (포커 아님)

"XX다1324" → 1 → 3 → ❌2❌ → 4 (오름차순 아님)

"XX라7689" → 7 → 6 → ❌8❌ → 9 (오름차순 아님)

"23마X9XX" → 2 → 3 → ❌9❌ (불연속)
   -  **앞자리 숫자가 연속된 숫자라면 6등급** (예:"34가XXXX", "45가XXXX")  
   - **뒷자리 숫자가 포커 번호라면 7등급** (예: "XX가7777", "XX가2222")  
   -  **앞자리 숫자가 연속된 숫자일 필요 없이, 뒷자리 숫자가 오름차순이라면 8등급** (예: "XX가1234", "XX가5678")  

 **6단계: 특정 패턴 (9~15등급) 확인**  
   -  **뒷자리가 A000 형태이면 9등급** (예: "12가1000", "45나9000")  
   -  **고유한 의미가 있는 번호(119, 1004, 777 등) → 10등급**  
   -  **뒷자리 내림차순 (4321, 8765) → 11등급**  
   -  **100의 배수 (AA00, AB00) → 12등급**  
   -  **특정 패턴 (101의 배수, AABB) → 13등급**  
   -  **특정 반복 패턴 (ABAC, ABCB) → 14등급**  
   -  **어떤 패턴에도 해당되지 않으면 15등급**  

---

## ** 등급별 예시 및 점수**
| 등급 | 점수 | 가격 | 예시 |
|------|------|------|------|
| **1등급** | 100 | 2,000,000 | 11가1111, 77나7777 |
| **2등급** | 95 | 1,800,000 | 12가3456 (전체 오름차순) |
| **3등급** | 90 | 1,500,000 | 22가3333, 11나2222 (앞뒤 다른 포커 번호) |
| **4등급** | 85 | 1,200,000 | 98가7654 (전체 내림차순) |
| **5등급** | 80 | 1,000,000 | 12가5555 (앞자리 오름 + 뒷자리 포커) |
| **6등급** | 75 | 800,000 | 34가XXXX (앞자리 오름차순) |
| **7등급** | 70 | 700,000 | XX가7777 (뒷자리 포커) |
| **8등급** | 60 | 600,000 | XX가1234 (뒷자리 오름차순) |
| **9등급** | 50 | 500,000 | 12가1000 (A000 형태) |
| **10등급** | 40 | 400,000 | 119가XXXX (특정 의미) |
| **11등급** | 35 | 350,000 | XX가4321 (뒷자리 내림차순) |
| **12등급** | 30 | 300,000 | XX가2200 (100의 배수) |
| **13등급** | 25 | 250,000 | XX가1331 (AABB 패턴) |
| **14등급** | 20 | 200,000 | XX가5253 (ABAC 패턴) |
| **15등급** | 10 | 100,000 | 다른 조건에 해당하지 않는 모든 번호 |

---

 **출력 형식**
-위 등급을 최소 10번이상의 결과값을 구한 후 

평균적 등급을 계산해서 정확한 제일 높은 grade score price 만 을 담아서 JSON 객체 형태 출력해줘 다른 정보는 주지마 


`;

  const handleChange = (e) => {
    setPoint(e.target.value);
  };

  const scoreCheck = () => {
    axios
      .post("http://localhost:5000/vehicles/aichat", { message: prompt }) // 객체로 전송
      .then((res) => {
        console.log("서버 응답:", res.data);
        let cleanData = res.data.replace(/```json|```/g, "").trim();

        // JSON 파싱
        const responseData = JSON.parse(cleanData);
        setScore(responseData); // 점수 응답 저장
      })
      .catch((err) => {
        console.error("Error:", err);
      });
  };

  return (
    <AipointStyled>
      <div style={{ color: "white" }}>점수 테스트</div>
      <Input
        value={point}
        onChange={handleChange}
        type="text"
        placeholder="번호판을 입력하세요"
      />
      <Button onClick={scoreCheck}>점수 확인</Button>
      <div style={{ color: "white" }}>등급: {score?.grade ?? "없음"}</div>
      <div style={{ color: "white" }}>점수: {score?.score ?? "없음"}</div>
      <div style={{ color: "white" }}>
        가격: {score?.price ? score.price.toLocaleString() : "없음"}원
      </div>
    </AipointStyled>
  );
};

export default AiPoint;
